
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package tiger.parse;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\006\000\002\014\005\000\002" +
    "\023\004\000\002\023\003\000\002\022\003\000\002\022" +
    "\003\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\005\000\002\016\005\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\020\003\000\002\020" +
    "\005\000\002\020\005\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\003\000\002\003\003\000\002\003\010\000\002" +
    "\003\006\000\002\003\007\000\002\003\012\000\002\003" +
    "\003\000\002\003\006\000\002\004\002\000\002\004\003" +
    "\000\002\004\005\000\002\005\002\000\002\005\003\000" +
    "\002\005\005\000\002\025\005\000\002\025\006\000\002" +
    "\027\005\000\002\030\003\000\002\030\005\000\002\036" +
    "\003\000\002\036\005\000\002\036\003\000\002\035\006" +
    "\000\002\035\010\000\002\010\011\000\002\010\013\000" +
    "\002\006\003\000\002\006\004\000\002\007\006\000\002" +
    "\007\003\000\002\007\003\000\002\032\003\000\002\032" +
    "\005\000\002\032\005\000\002\034\002\000\002\034\003" +
    "\000\002\034\005\000\002\033\005\000\002\031\003\000" +
    "\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\044\004\033\005\046\006\013\007\027\011" +
    "\022\012\011\021\031\022\020\037\032\042\042\043\017" +
    "\046\043\052\040\053\026\054\005\055\050\056\025\001" +
    "\002\000\004\002\230\001\002\000\004\004\216\001\002" +
    "\000\060\002\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017" +
    "\uffe6\025\uffe6\026\uffe6\027\114\030\116\031\115\032\117" +
    "\033\uffe6\034\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\040" +
    "\002\uffde\007\uffde\011\uffde\013\uffde\015\uffde\017\uffde\040" +
    "\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054\uffde" +
    "\055\uffde\056\uffde\001\002\000\014\002\uffc0\047\uffc0\054" +
    "\uffc0\055\uffc0\056\uffc0\001\002\000\036\004\033\005\046" +
    "\006\013\011\uffd6\012\011\013\uffd6\021\031\022\020\037" +
    "\032\042\042\043\017\046\043\052\040\053\026\001\002" +
    "\000\070\002\uffee\007\uffee\011\uffee\013\uffee\015\uffee\017" +
    "\uffee\021\uffee\022\uffee\023\125\024\124\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\040" +
    "\uffee\041\uffee\044\uffee\045\uffee\047\uffee\050\uffee\054\uffee" +
    "\055\uffee\056\uffee\001\002\000\070\002\ufffa\007\ufffa\011" +
    "\ufffa\013\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa" +
    "\047\ufffa\050\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000" +
    "\100\002\uffc9\007\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047" +
    "\uffc9\050\uffc9\051\212\054\uffc9\055\uffc9\056\uffc9\001\002" +
    "\000\004\016\201\001\002\000\064\002\uffeb\007\uffeb\011" +
    "\uffeb\013\uffeb\015\uffeb\017\uffeb\021\121\022\122\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\001\002\000\004\004\172\001" +
    "\002\000\014\004\ufff2\005\ufff2\006\ufff2\012\ufff2\053\ufff2" +
    "\001\002\000\040\002\uffdd\007\uffdd\011\uffdd\013\uffdd\015" +
    "\uffdd\017\uffdd\040\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd" +
    "\050\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000\004\002" +
    "\uffff\001\002\000\070\002\ufff1\007\ufff1\011\ufff1\013\ufff1" +
    "\015\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\040\ufff1\041\ufff1\044\ufff1\045\ufff1\047\ufff1\050" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002\000\044\002\uffe0" +
    "\007\uffe0\011\uffe0\013\uffe0\015\uffe0\017\uffe0\033\166\034" +
    "\167\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\001\002\000\004\004\145\001" +
    "\002\000\070\002\ufff9\007\ufff9\011\ufff9\013\ufff9\015\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\040\ufff9\041\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\001\002\000\004\002\000\001\002" +
    "\000\014\002\uffc4\047\uffc4\054\uffc4\055\uffc4\056\uffc4\001" +
    "\002\000\014\004\ufff3\005\ufff3\006\ufff3\012\ufff3\053\ufff3" +
    "\001\002\000\032\004\033\005\046\006\013\012\011\021" +
    "\031\022\020\037\032\042\042\043\017\046\043\052\040" +
    "\053\026\001\002\000\102\002\uffcb\007\uffcb\011\uffcb\012" +
    "\106\013\uffcb\014\uffcb\015\uffcb\016\uffb8\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\040\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\001\002\000\076\002\ufff8\007\ufff8" +
    "\011\ufff8\013\ufff8\014\101\015\ufff8\017\ufff8\020\102\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\136\040" +
    "\ufff8\041\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\001\002\000\070\002\ufff4\007\ufff4\011" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\034\ufff4\040\ufff4\041\ufff4\044\ufff4\045\ufff4" +
    "\047\ufff4\050\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000" +
    "\014\004\077\005\046\006\013\012\011\053\026\001\002" +
    "\000\014\002\uffc1\047\uffc1\054\uffc1\055\uffc1\056\uffc1\001" +
    "\002\000\040\002\uffd8\007\uffd8\011\uffd8\013\uffd8\015\uffd8" +
    "\017\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\050\002\uffe3" +
    "\007\uffe3\011\uffe3\013\uffe3\015\uffe3\017\uffe3\025\073\026" +
    "\074\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000" +
    "\032\004\033\005\046\006\013\012\011\021\031\022\020" +
    "\037\032\042\042\043\017\046\043\052\040\053\026\001" +
    "\002\000\010\054\005\055\050\056\025\001\002\000\004" +
    "\002\ufffc\001\002\000\012\002\ufffe\054\005\055\050\056" +
    "\025\001\002\000\070\002\ufffb\007\ufffb\011\ufffb\013\ufffb" +
    "\015\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\040\ufffb\041\ufffb\044\ufffb\045\ufffb\047\ufffb\050" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000\004\002\ufffd" +
    "\001\002\000\004\004\051\001\002\000\006\010\052\035" +
    "\053\001\002\000\004\004\055\001\002\000\032\004\033" +
    "\005\046\006\013\012\011\021\031\022\020\037\032\042" +
    "\042\043\017\046\043\052\040\053\026\001\002\000\014" +
    "\002\uffc8\047\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000" +
    "\004\035\056\001\002\000\032\004\033\005\046\006\013" +
    "\012\011\021\031\022\020\037\032\042\042\043\017\046" +
    "\043\052\040\053\026\001\002\000\014\002\uffc7\047\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\001\002\000\014\002\uffc3\047" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\012\047\062" +
    "\054\005\055\050\056\025\001\002\000\036\004\033\005" +
    "\046\006\013\011\uffd6\012\011\021\031\022\020\037\032" +
    "\042\042\043\017\046\043\050\uffd6\052\040\053\026\001" +
    "\002\000\010\011\uffd5\013\uffd5\050\uffd5\001\002\000\006" +
    "\011\065\050\066\001\002\000\032\004\033\005\046\006" +
    "\013\012\011\021\031\022\020\037\032\042\042\043\017" +
    "\046\043\052\040\053\026\001\002\000\040\002\uffda\007" +
    "\uffda\011\uffda\013\uffda\015\uffda\017\uffda\040\uffda\041\uffda" +
    "\044\uffda\045\uffda\047\uffda\050\uffda\054\uffda\055\uffda\056" +
    "\uffda\001\002\000\010\011\uffd4\013\uffd4\050\uffd4\001\002" +
    "\000\004\045\071\001\002\000\032\004\033\005\046\006" +
    "\013\012\011\021\031\022\020\037\032\042\042\043\017" +
    "\046\043\052\040\053\026\001\002\000\040\002\uffd7\007" +
    "\uffd7\011\uffd7\013\uffd7\015\uffd7\017\uffd7\040\uffd7\041\uffd7" +
    "\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\001\002\000\020\004\077\005\046\006\013\012\011" +
    "\021\031\022\020\053\026\001\002\000\020\004\077\005" +
    "\046\006\013\012\011\021\031\022\020\053\026\001\002" +
    "\000\074\002\uffc9\007\uffc9\011\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\040\uffc9\041\uffc9\044\uffc9\045\uffc9\047\uffc9" +
    "\050\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000\060\002" +
    "\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4\025\uffe4" +
    "\026\uffe4\027\114\030\116\031\115\032\117\033\uffe4\034" +
    "\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\001\002\000\076\002\uffcb\007" +
    "\uffcb\011\uffcb\012\106\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\040\uffcb\041\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\001\002\000\074\002\ufff8\007\ufff8" +
    "\011\ufff8\013\ufff8\014\101\015\ufff8\017\ufff8\020\102\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\001\002\000\032\004\033\005\046\006\013\012" +
    "\011\021\031\022\020\037\032\042\042\043\017\046\043" +
    "\052\040\053\026\001\002\000\004\004\103\001\002\000" +
    "\076\002\uffca\007\uffca\011\uffca\013\uffca\014\uffca\015\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\040\uffca\041\uffca\044\uffca\045\uffca\047" +
    "\uffca\050\uffca\054\uffca\055\uffca\056\uffca\001\002\000\004" +
    "\015\105\001\002\000\100\002\uffb7\007\uffb7\011\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7\041\uffb7" +
    "\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\001\002\000\036\004\033\005\046\006\013" +
    "\007\uffd3\012\011\013\uffd3\021\031\022\020\037\032\042" +
    "\042\043\017\046\043\052\040\053\026\001\002\000\006" +
    "\007\111\013\112\001\002\000\006\007\uffd2\013\uffd2\001" +
    "\002\000\032\004\033\005\046\006\013\012\011\021\031" +
    "\022\020\037\032\042\042\043\017\046\043\052\040\053" +
    "\026\001\002\000\070\002\ufff7\007\ufff7\011\ufff7\013\ufff7" +
    "\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7\050" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\006\007\uffd1" +
    "\013\uffd1\001\002\000\020\004\077\005\046\006\013\012" +
    "\011\021\031\022\020\053\026\001\002\000\020\004\077" +
    "\005\046\006\013\012\011\021\031\022\020\053\026\001" +
    "\002\000\020\004\077\005\046\006\013\012\011\021\031" +
    "\022\020\053\026\001\002\000\020\004\077\005\046\006" +
    "\013\012\011\021\031\022\020\053\026\001\002\000\064" +
    "\002\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021" +
    "\121\022\122\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\040\uffe7\041\uffe7\044\uffe7\045" +
    "\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002" +
    "\000\020\004\077\005\046\006\013\012\011\021\031\022" +
    "\020\053\026\001\002\000\020\004\077\005\046\006\013" +
    "\012\011\021\031\022\020\053\026\001\002\000\070\002" +
    "\uffec\007\uffec\011\uffec\013\uffec\015\uffec\017\uffec\021\uffec" +
    "\022\uffec\023\125\024\124\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\040\uffec\041\uffec" +
    "\044\uffec\045\uffec\047\uffec\050\uffec\054\uffec\055\uffec\056" +
    "\uffec\001\002\000\020\004\077\005\046\006\013\012\011" +
    "\021\031\022\020\053\026\001\002\000\020\004\077\005" +
    "\046\006\013\012\011\021\031\022\020\053\026\001\002" +
    "\000\070\002\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0\017" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\040" +
    "\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\001\002\000\070\002\uffef\007\uffef\011" +
    "\uffef\013\uffef\015\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\040\uffef\041\uffef\044\uffef\045\uffef" +
    "\047\uffef\050\uffef\054\uffef\055\uffef\056\uffef\001\002\000" +
    "\070\002\uffed\007\uffed\011\uffed\013\uffed\015\uffed\017\uffed" +
    "\021\uffed\022\uffed\023\125\024\124\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\040\uffed" +
    "\041\uffed\044\uffed\045\uffed\047\uffed\050\uffed\054\uffed\055" +
    "\uffed\056\uffed\001\002\000\064\002\uffe9\007\uffe9\011\uffe9" +
    "\013\uffe9\015\uffe9\017\uffe9\021\121\022\122\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\040\uffe9\041\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\001\002\000\064\002\uffe8\007\uffe8" +
    "\011\uffe8\013\uffe8\015\uffe8\017\uffe8\021\121\022\122\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\040\uffe8\041\uffe8\044\uffe8\045\uffe8\047\uffe8\050" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\064\002\uffea" +
    "\007\uffea\011\uffea\013\uffea\015\uffea\017\uffea\021\121\022" +
    "\122\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\040\uffea\041\uffea\044\uffea\045\uffea\047" +
    "\uffea\050\uffea\054\uffea\055\uffea\056\uffea\001\002\000\060" +
    "\002\uffe5\007\uffe5\011\uffe5\013\uffe5\015\uffe5\017\uffe5\025" +
    "\uffe5\026\uffe5\027\114\030\116\031\115\032\117\033\uffe5" +
    "\034\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047\uffe5\050" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\070\002\ufff5" +
    "\007\ufff5\011\ufff5\013\ufff5\015\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\040\ufff5\041\ufff5\044" +
    "\ufff5\045\ufff5\047\ufff5\050\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\020\004\033\005\046\006\013\012\011\021" +
    "\031\022\020\053\026\001\002\000\040\002\uffdf\007\uffdf" +
    "\011\uffdf\013\uffdf\015\uffdf\017\uffdf\040\uffdf\041\uffdf\044" +
    "\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\001\002\000\004\040\141\001\002\000\032\004\033\005" +
    "\046\006\013\012\011\021\031\022\020\037\032\042\042" +
    "\043\017\046\043\052\040\053\026\001\002\000\040\002" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\040\uffdb" +
    "\041\143\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\001\002\000\032\004\033\005\046\006\013" +
    "\012\011\021\031\022\020\037\032\042\042\043\017\046" +
    "\043\052\040\053\026\001\002\000\040\002\uffdc\007\uffdc" +
    "\011\uffdc\013\uffdc\015\uffdc\017\uffdc\040\uffdc\041\uffdc\044" +
    "\uffdc\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\001\002\000\004\025\146\001\002\000\010\004\150\016" +
    "\151\036\153\001\002\000\014\002\uffc2\047\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\024\002\uffb8\007\uffb8\013" +
    "\uffb8\017\uffb8\025\uffb8\047\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\001\002\000\010\004\156\007\uffbc\017\uffbc\001\002\000" +
    "\014\002\uffbf\047\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002" +
    "\000\004\051\154\001\002\000\004\004\150\001\002\000" +
    "\014\002\uffbe\047\uffbe\054\uffbe\055\uffbe\056\uffbe\001\002" +
    "\000\004\010\164\001\002\000\006\007\161\017\162\001" +
    "\002\000\010\007\uffbb\013\uffbb\017\uffbb\001\002\000\004" +
    "\004\156\001\002\000\014\002\uffbd\047\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\001\002\000\010\007\uffba\013\uffba\017\uffba" +
    "\001\002\000\004\004\150\001\002\000\010\007\uffb9\013" +
    "\uffb9\017\uffb9\001\002\000\020\004\077\005\046\006\013" +
    "\012\011\021\031\022\020\053\026\001\002\000\020\004" +
    "\077\005\046\006\013\012\011\021\031\022\020\053\026" +
    "\001\002\000\050\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015" +
    "\uffe2\017\uffe2\025\073\026\074\033\uffe2\034\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\001\002\000\050\002\uffe1\007\uffe1\011\uffe1" +
    "\013\uffe1\015\uffe1\017\uffe1\025\073\026\074\033\uffe1\034" +
    "\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\001\002\000\004\035\173\001" +
    "\002\000\032\004\033\005\046\006\013\012\011\021\031" +
    "\022\020\037\032\042\042\043\017\046\043\052\040\053" +
    "\026\001\002\000\004\044\175\001\002\000\032\004\033" +
    "\005\046\006\013\012\011\021\031\022\020\037\032\042" +
    "\042\043\017\046\043\052\040\053\026\001\002\000\004" +
    "\045\177\001\002\000\032\004\033\005\046\006\013\012" +
    "\011\021\031\022\020\037\032\042\042\043\017\046\043" +
    "\052\040\053\026\001\002\000\040\002\uffd9\007\uffd9\011" +
    "\uffd9\013\uffd9\015\uffd9\017\uffd9\040\uffd9\041\uffd9\044\uffd9" +
    "\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055\uffd9\056\uffd9\001" +
    "\002\000\004\004\202\001\002\000\004\025\210\001\002" +
    "\000\006\007\205\017\206\001\002\000\006\007\uffcd\017" +
    "\uffcd\001\002\000\004\004\202\001\002\000\040\002\uffcf" +
    "\007\uffcf\011\uffcf\013\uffcf\015\uffcf\017\uffcf\040\uffcf\041" +
    "\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\001\002\000\006\007\uffcc\017\uffcc\001\002\000" +
    "\032\004\033\005\046\006\013\012\011\021\031\022\020" +
    "\037\032\042\042\043\017\046\043\052\040\053\026\001" +
    "\002\000\006\007\uffce\017\uffce\001\002\000\032\004\033" +
    "\005\046\006\013\012\011\021\031\022\020\037\032\042" +
    "\042\043\017\046\043\052\040\053\026\001\002\000\040" +
    "\002\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0\040" +
    "\uffd0\041\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\001\002\000\006\011\065\013\215\001" +
    "\002\000\070\002\ufff6\007\ufff6\011\ufff6\013\ufff6\015\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\040\ufff6\041\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\001\002\000\004\012\217\001\002" +
    "\000\010\004\156\007\uffbc\013\uffbc\001\002\000\006\007" +
    "\161\013\221\001\002\000\006\010\223\025\222\001\002" +
    "\000\032\004\033\005\046\006\013\012\011\021\031\022" +
    "\020\037\032\042\042\043\017\046\043\052\040\053\026" +
    "\001\002\000\004\004\150\001\002\000\004\025\225\001" +
    "\002\000\032\004\033\005\046\006\013\012\011\021\031" +
    "\022\020\037\032\042\042\043\017\046\043\052\040\053" +
    "\026\001\002\000\014\002\uffc5\047\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\001\002\000\014\002\uffc6\047\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\052\002\003\003\043\006\044\007\027\010" +
    "\007\011\046\014\034\015\011\016\015\017\023\020\040" +
    "\021\005\022\035\023\022\024\020\025\006\026\013\031" +
    "\014\035\036\036\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\062\004\213\014\034\015\011\016\015" +
    "\017\023\020\040\021\005\022\035\023\022\024\020\025" +
    "\006\026\013\031\014\036\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\137\014" +
    "\034\015\011\016\015\017\023\020\040\021\005\022\035" +
    "\023\022\024\020\025\006\026\013\031\014\036\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\134\026\074\036\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\067" +
    "\014\034\015\011\016\015\017\023\020\040\021\005\022" +
    "\035\023\022\024\020\025\006\026\013\031\014\036\033" +
    "\001\001\000\012\006\060\007\027\010\007\035\036\001" +
    "\001\000\002\001\001\000\010\007\057\010\007\035\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\053" +
    "\014\034\015\011\016\015\017\023\020\040\021\005\022" +
    "\035\023\022\024\020\025\006\026\013\031\014\036\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\056\014\034\015\011\016\015\017\023\020\040\021\005" +
    "\022\035\023\022\024\020\025\006\026\013\031\014\036" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\057\010\007\035\036\001\001\000\040\003\062\004" +
    "\063\014\034\015\011\016\015\017\023\020\040\021\005" +
    "\022\035\023\022\024\020\025\006\026\013\031\014\036" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\066\014\034\015\011\016\015\017\023\020\040\021" +
    "\005\022\035\023\022\024\020\025\006\026\013\031\014" +
    "\036\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\071\014\034\015\011\016\015" +
    "\017\023\020\040\021\005\022\035\023\022\024\020\025" +
    "\006\026\013\031\014\036\033\001\001\000\002\001\001" +
    "\000\022\014\034\015\011\016\015\021\133\022\035\023" +
    "\022\026\074\036\077\001\001\000\022\014\034\015\011" +
    "\016\015\021\075\022\035\023\022\026\074\036\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\103\014\034\015\011\016" +
    "\015\017\023\020\040\021\005\022\035\023\022\024\020" +
    "\025\006\026\013\031\014\036\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\107\005\106\014\034\015\011\016\015\017" +
    "\023\020\040\021\005\022\035\023\022\024\020\025\006" +
    "\026\013\031\014\036\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\112\014\034\015\011\016\015" +
    "\017\023\020\040\021\005\022\035\023\022\024\020\025" +
    "\006\026\013\031\014\036\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\034\015\011\016\132\022" +
    "\035\023\022\026\074\036\077\001\001\000\020\014\034" +
    "\015\011\016\131\022\035\023\022\026\074\036\077\001" +
    "\001\000\020\014\034\015\011\016\130\022\035\023\022" +
    "\026\074\036\077\001\001\000\020\014\034\015\011\016" +
    "\117\022\035\023\022\026\074\036\077\001\001\000\002" +
    "\001\001\000\016\014\034\015\127\022\035\023\022\026" +
    "\074\036\077\001\001\000\016\014\034\015\122\022\035" +
    "\023\022\026\074\036\077\001\001\000\002\001\001\000" +
    "\014\014\034\022\035\023\126\026\074\036\077\001\001" +
    "\000\014\014\034\022\035\023\125\026\074\036\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\034\015\011" +
    "\016\015\017\023\020\040\021\005\022\035\023\022\024" +
    "\136\025\006\026\013\031\014\036\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\141\014\034\015" +
    "\011\016\015\017\023\020\040\021\005\022\035\023\022" +
    "\024\020\025\006\026\013\031\014\036\033\001\001\000" +
    "\002\001\001\000\036\003\143\014\034\015\011\016\015" +
    "\017\023\020\040\021\005\022\035\023\022\024\020\025" +
    "\006\026\013\031\014\036\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\151\032\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\157\034\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\164\001\001" +
    "\000\002\001\001\000\024\014\034\015\011\016\015\020" +
    "\170\021\005\022\035\023\022\026\074\036\077\001\001" +
    "\000\024\014\034\015\011\016\015\020\167\021\005\022" +
    "\035\023\022\026\074\036\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\173\014" +
    "\034\015\011\016\015\017\023\020\040\021\005\022\035" +
    "\023\022\024\020\025\006\026\013\031\014\036\033\001" +
    "\001\000\002\001\001\000\036\003\175\014\034\015\011" +
    "\016\015\017\023\020\040\021\005\022\035\023\022\024" +
    "\020\025\006\026\013\031\014\036\033\001\001\000\002" +
    "\001\001\000\036\003\177\014\034\015\011\016\015\017" +
    "\023\020\040\021\005\022\035\023\022\024\020\025\006" +
    "\026\013\031\014\036\033\001\001\000\002\001\001\000" +
    "\006\027\203\030\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\210\014\034" +
    "\015\011\016\015\017\023\020\040\021\005\022\035\023" +
    "\022\024\020\025\006\026\013\031\014\036\033\001\001" +
    "\000\002\001\001\000\036\003\212\014\034\015\011\016" +
    "\015\017\023\020\040\021\005\022\035\023\022\024\020" +
    "\025\006\026\013\031\014\036\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\157\034\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\226\014\034\015\011\016\015" +
    "\017\023\020\040\021\005\022\035\023\022\024\020\025" +
    "\006\026\013\031\014\036\033\001\001\000\004\031\223" +
    "\001\001\000\002\001\001\000\036\003\225\014\034\015" +
    "\011\016\015\017\023\020\040\021\005\022\035\023\022" +
    "\024\020\025\006\026\013\031\014\036\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= decs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= stat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primary_expr ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // primary_expr ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // primary_expr ::= NIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primary_expr ::= lvalue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primary_expr ::= ID LPAREN exprlist RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primary_expr ::= LPAREN exprs RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // unary_expr ::= unary_op primary_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // unary_expr ::= primary_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // multiplicative_expr ::= unary_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // multiplicative_expr ::= multiplicative_expr TIMES unary_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // multiplicative_expr ::= multiplicative_expr DIVIDE unary_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // additive_expr ::= multiplicative_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // additive_expr ::= additive_expr PLUS multiplicative_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // additive_expr ::= additive_expr MINUS multiplicative_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relation_expr ::= additive_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relation_expr ::= relation_expr LT additive_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relation_expr ::= relation_expr LE additive_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relation_expr ::= relation_expr GT additive_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // relation_expr ::= relation_expr GE additive_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // equality_expr ::= relation_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // equality_expr ::= equality_expr EQ relation_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // equality_expr ::= equality_expr NEQ relation_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expr ::= equality_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical_expr ::= logical_expr OR equality_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logical_expr ::= logical_expr AND equality_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assign_expr ::= logical_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assign_expr ::= lvalue ASSIGN assign_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign_expr ::= array_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= assign_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= IF expr THEN expr ELSE expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= IF expr THEN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= LET decs IN exprs END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= WHILE expr DO expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprs ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprs ::= exprs SEMICOLON expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprlist ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprlist ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprlist ::= exprlist COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_expr ::= array_ins OF expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_expr ::= type_id LBRACE inside_assigns RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inside_assign ::= ID EQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inside_assign",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inside_assigns ::= inside_assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inside_assigns",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inside_assigns ::= inside_assigns COMMA inside_assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inside_assigns",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lvalue ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lvalue ::= lvalue DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lvalue ::= array_ins 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // vardec ::= VAR ID ASSIGN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // vardec ::= VAR ID COLON ID ASSIGN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // functiondec ::= FUNCTION ID LPAREN tyfields RPAREN EQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functiondec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // functiondec ::= FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functiondec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decs ::= dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decs ::= decs dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec ::= TYPE ID EQ ty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec ::= vardec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dec ::= functiondec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ty ::= type_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ty ::= ARRAY OF type_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ty ::= LBRACE tyfields RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tyfields ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tyfields ::= tyfield 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tyfields ::= tyfields COMMA tyfield 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tyfield ::= ID COLON type_id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfield",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_id ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // array_ins ::= lvalue LBRACK expr RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_ins",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
